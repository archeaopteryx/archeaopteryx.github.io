<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Archeaopteryx coding blog</title>
        <link>https://archeaopteryx.github.io/</link>
        <atom:link href="https://archeaopteryx.github.io/rss.xml" rel="self" type="application/rss+xml" />
        <description>Self-taught programmer blog</description>
        <language>en-us</language>
        <pubDate>Thu, 16 Jul 2020 16:00:00 GMT</pubDate>
        <lastBuildDate>Mon, 14 Feb 2022 20:00:00 GMT</lastBuildDate>
        <item>
            <title>Finding duplicate PDFs with bash</title>
            <link>https://archeaopteryx.github.io/html/slice-of-web-history.html</link>
            <guid>https://archeaopteryx.github.io/html/slice-of-web-history.html</guid>
            <description>A bit of poking around on a old website used by a research group, and the sites it links to. Just the enjoyment of seeing a bit of the web that continues to have distinct character and is built on stable technology.</description>
            <pubDate>Mon, 14 Feb 2022 20:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Finding duplicate PDFs with bash</title>
            <link>https://archeaopteryx.github.io/html/bash_duplicate_checker.html</link>
            <guid>https://archeaopteryx.github.io/html/bash_duplicate_checker.html</guid>
            <description>A small adventure in looking at the contents and meta-data of PDF files with bash tools. ExifTool is used to read meta-data. Standard tools such as awk, sort und uniq are used to identify duplicate files based on their meta-data. Similar, but more readable results can be obtained by using the file hashes instead. Finally, pdftotext from the poppler-utils is used to create a simple identifying 'fingerprint' based on the contents of the files.</description>
            <pubDate>Mon, 10 Jan 2022 20:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Dynamic forms with JS</title>
            <link>https://archeaopteryx.github.io/html/dynamic-forms.html</link>
            <guid>https://archeaopteryx.github.io/html/dynamic-forms.html</guid>
            <description>As a web-dev newbie I'm easily distracted by silly projects, and this definitely qualifies as one of them. I decided to use JavaScript to mimic page navigation for part of a personal project. Basically, I got annoyed that my banner image flickers each time a new page is requested and decided to eliminate that for the login area. Users with JS enabled will be able to login, register or reset their password from a single page, with the displayed forms providing the illusion of page navigation. This required an encounter with the history API for reasonable behavior when bookmarking or navigating using the forward and back buttons in the browser. Using JS on a page with forms naturally means it's time to do some client-side pre-validation. For the case of validating new usernames as unique, this involves a bit of asynchronous code and a server request without a page reload. </description>
            <pubDate>Sat, 03 Apr 2021 20:00:00 GMT</pubDate>
        </item>
        <item>
            <title>My first PHP deployment</title>
            <link>https://archeaopteryx.github.io/html/first-php-deployment.html</link>
            <guid>https://archeaopteryx.github.io/html/first-php-deployment.html</guid>
            <description>The adventures of a coding newbie continue with the deployment of my first dynamic site written in PHP. Development was done using PHP's built in server and without making any changes to the values in the php.ini file. Redirects worked when testing on localhost despite the location header being set after the headers should already sent. Oddly, the site worked in the development environment, but failed to perform redirects when hosted on the remote server. A small investigation determined that this was due to the php.ini installed locally having a nonzero output_buffer value while the remote server php.ini had output buffering turned off. Deployment also revealed that my assumptions about reasonable default file rights were incorrect. Once the site was working, placement of the footer was improved by using auto margins with flexbox.</description>
            <pubDate>Fri, 04 Dec 2020 18:20:00 GMT</pubDate>
        </item>
        <item>
            <title>How I learned to stop worrying, and love PHP</title>
            <link>https://archeaopteryx.github.io/html/phpCrashCourse.html</link>
            <guid>https://archeaopteryx.github.io/html/phpCrashCourse.html</guid>
            <description>Due to my comfort with Python, I made my first dynamic site using the Django framework. Once ready to deploy the demo version of the site, I learned that deploying with Django can be a challenge in general, and would be impossible with my shared hosting service in particular. While waiting to hear from customer support, I decided to blow off some steam by trying out PHP. Despite the language's poor reputation, it allowed me to rewrite and deploy the demo version of my site quickly and easily.</description>
            <pubDate>Tue, 03 Nov 2020 19:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Troubleshooting Python: error while loading shared libraries</title>
            <link>https://archeaopteryx.github.io/html/python-error-shared-library.html</link>
            <guid>https://archeaopteryx.github.io/html/python-error-shared-library.html</guid>
            <description>After an OS upgrade, trying to run python in virtual environments failed with the error message "python: error while loading shared libraries: libpython3.7m.so.1.0: cannot open shared object file: No such file or directory". Not knowing what a .so file actually is or why I need it, it took some poking around to realize that it is a low level 'shared object' file that is necessary for the python interpreter. This file was missing due to python3.7 being uninstalled and replaced with python3.8 during the OS upgrade. During this process, I also found that I had accidentally used two different virtual environments over time, which caused brief confusion regarding why some venvs had a pyvenv.cfg file.</description>
            <pubDate>Thu, 01 Oct 2020 11:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Command Line Arguments with Python</title>
            <link>https://archeaopteryx.github.io/html/commandLineArgs.html</link>
            <guid>https://archeaopteryx.github.io/html/commandLineArgs.html</guid>
            <description>Post about using command line options and arguments to change script behavior. Starts by describing how options can be passed to a bash script. Then moves to the getopt module in the python standard library, which is very similar to a bash built-in. While the getopt python module is easy to use, it has limited functionality and is not the recommended way to build command line interfaces for python. The recommended approach is to use argparse, another standard library module. An example of using argparse for command line options and sub-commands with additional arguments is given. Finally, some of the advantages of argparse over getopt are discussed.</description>
            <pubDate>Wed, 08 Jul 2020 19:00:00 GMT</pubDate>
        </item>
        <item>
            <title>EfaPi II: The Cron Job</title>
            <link>https://archeaopteryx.github.io/html/efaPi-part-ii.html</link>
            <guid>https://archeaopteryx.github.io/html/efaPi-part-ii.html</guid>
            <description>This post is about my first experience writing bash scripts and scheduling a cron job. This was done for the EfaPi, a raspberry Pi dedicated to running an electronic log book for a rowing club. This post consists mostly of explaining what the scripts do, and giving a short introduction to the cron scheduling utility.</description>
            <pubDate>Sun, 07 Jun 2020 19:00:00 GMT</pubDate>
        </item>
        <item>
            <title>EfaPi I: Getting Started</title>
            <link>https://archeaopteryx.github.io/html/efaPi-part-i.html</link>
            <guid>https://archeaopteryx.github.io/html/efaPi-part-i.html</guid>
            <description>EFA is an electronic log book commonly used by rowers in German speaking countries. This post is about setting up a raspberry Pi to run the EFA software. I used Rasbian Lite, a version of Rasbian with a command line interface but no desktop. I describe making a user through the command line, and what software will be used to run EFA. Because EFA is a GUI application, and there was a request for having GUI access to the file system, this includes a window manager and light weight desktop environment (lxde). A custom keybinding is added by editing lxde-rc.xml, and desktop icons are added by making desktop files. Changes to the autostart file, and the configuration necessary to auto-login a user are given. Finally, the process of disabling the screen-lock for the efa user is described.</description>
            <pubDate>Sun, 07 Jun 2020 19:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Hello, Website!</title>
            <link>https://archeaopteryx.github.io/html/hello-website.html</link>
            <guid>https://archeaopteryx.github.io/html/hello-website.html</guid>
            <description>Post describing the motivation and some of the design considerations for making this site. This blog serves both as a platform to write about things I find interesting, and as a means to get some first hand experience with websites. Special attention is given to accessibility considerations for users with vision issues. This is comprised of a 'skip to main' option for screen readers, relative font sizing, and constrast considerations for color selection. Finally, the challenge of making a desktop-first site mobile friendly is mentioned. All together, I gained an appreciateion for the service provided by static site generators that make it easy to create websites that are far more beautiful than my simple hand-coded blog, but still am happy to have made my own site.</description>
            <pubDate>Sun, 07 Jun 2020 19:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>
